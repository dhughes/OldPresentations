<cffunction name="init" access="public" returntype="transfer.com.TransferObject" default="transfer.com.TransferObject" hint="" output="false">
<cfargument name="transfer" type="transfer.com.Transfer" required="true">
<cfargument name="utility" type="transfer.com.util.Utility" required="true">
<cfargument name="nullable" type="transfer.com.sql.Nullable" required="true">
<cfargument name="thisObject" type="transfer.com.TransferObject" required="true">
<cfscript>
instance = StructNew();
setThisObject(arguments.thisObject);
setTransfer(arguments.transfer);
setUtility(arguments.utility);
setNullable(arguments.nullable);
setClassName("widget.WidgetType");
setIsDirty(true);
setIsPersisted(false);
setIsClone(false);
setwidgetTypeId(getNullable().getNullNumeric(getClassName(), "widgetTypeId"));
setname("");
setLoaded(StructNew());
setWidgetisLoaded(true);
setWidgetAsArrayisLoaded(true);
setWidgetCollection(StructNew());
setWidgetAsArrayCollection(ArrayNew(1));
if(StructKeyExists(this, "configure") OR StructKeyExists(variables, "configure"))
{
configure();
}
return this;
</cfscript>
</cffunction>

<cffunction name="equalsTransfer" access="public" returntype="boolean" default="boolean" hint="If an object is persisted, returns true if they are of the same class and same id. If not, returns true if they are the same object." output="false">
<cfargument name="transfer" type="transfer.com.TransferObject" required="true">
<cfscript>
if(getIsPersisted())
{
if(getClassName() neq arguments.transfer.getClassName())
{
return false;
}
return (getwidgetTypeId() eq arguments.transfer.getwidgetTypeId());
}
else
{
return sameTransfer(arguments.transfer);
}
</cfscript>
</cffunction>

<cffunction name="initEventObservers" access="package" returntype="void" default="void" hint="initialises the Observers on this object" output="false">
<cfscript>
getTransfer().addAfterDeleteObserver(getThisObject());
getTransfer().addAfterUpdateObserver(getThisObject());
getTransfer().addBeforeDiscardObserver(getThisObject());
</cfscript>
</cffunction>

<cffunction name="getwidgetTypeId" access="public" returntype="numeric" default="numeric" hint="" output="false">
<cfscript>
return instance.widgetTypeId;
</cfscript>
</cffunction>

<cffunction name="setwidgetTypeId" access="public" returntype="void" default="void" hint="" output="false">
<cfargument name="widgetTypeId" type="numeric" required="true">
<cfscript>
if(NOT StructKeyExists(instance, "widgetTypeId") OR getwidgetTypeId() neq arguments.widgetTypeId)
{
instance.widgetTypeId = arguments.widgetTypeId;
setIsDirty(true);
}
</cfscript>
</cffunction>

<cffunction name="getname" access="public" returntype="string" default="string" hint="" output="false">
<cfscript>
return instance.name;
</cfscript>
</cffunction>

<cffunction name="setname" access="public" returntype="void" default="void" hint="" output="false">
<cfargument name="name" type="string" required="true">
<cfscript>
if(NOT StructKeyExists(instance, "name") OR Compare(getname(), arguments.name) neq 0)
{
instance.name = arguments.name;
setIsDirty(true);
}
</cfscript>
</cffunction>

<cffunction name="getWidgetisLoaded" access="private" returntype="boolean" default="boolean" hint="" output="false">
<cfscript>
if(NOT StructKeyExists(getLoaded(), "Widget"))
{
setWidgetisLoaded(false);
}
return StructFind(getLoaded(), "Widget");
</cfscript>
</cffunction>

<cffunction name="setWidgetisLoaded" access="private" returntype="void" default="void" hint="" output="false">
<cfargument name="loaded" type="boolean" required="true">
<cfscript>
StructInsert(getLoaded(), "Widget", arguments.loaded, true);
</cfscript>
</cffunction>

<cffunction name="loadWidget" access="private" returntype="void" default="void" hint="" output="false">
<cfif NOT getWidgetisLoaded()>
<cflock name="transfer.load.widget.WidgetType.#getwidgetTypeId()#" timeout="60">
<cfif NOT getWidgetisLoaded()>
<cfscript>
getTransfer().loadOneToMany(getThisObject(), "Widget");
</cfscript>
</cfif>
</cflock>
</cfif>
</cffunction>

<cffunction name="getWidgetAsArrayisLoaded" access="private" returntype="boolean" default="boolean" hint="" output="false">
<cfscript>
if(NOT StructKeyExists(getLoaded(), "WidgetAsArray"))
{
setWidgetAsArrayisLoaded(false);
}
return StructFind(getLoaded(), "WidgetAsArray");
</cfscript>
</cffunction>

<cffunction name="setWidgetAsArrayisLoaded" access="private" returntype="void" default="void" hint="" output="false">
<cfargument name="loaded" type="boolean" required="true">
<cfscript>
StructInsert(getLoaded(), "WidgetAsArray", arguments.loaded, true);
</cfscript>
</cffunction>

<cffunction name="loadWidgetAsArray" access="private" returntype="void" default="void" hint="" output="false">
<cfif NOT getWidgetAsArrayisLoaded()>
<cflock name="transfer.load.widget.WidgetType.#getwidgetTypeId()#" timeout="60">
<cfif NOT getWidgetAsArrayisLoaded()>
<cfscript>
getTransfer().loadOneToMany(getThisObject(), "WidgetAsArray");
</cfscript>
</cfif>
</cflock>
</cfif>
</cffunction>

<cffunction name="setMemento" access="public" returntype="void" default="void" hint="" output="false">
<cfargument name="memento" type="struct" required="true">
<cfscript>
var composite = 0;
if(NOT getIsPersisted())
{
setwidgetTypeId(arguments.memento.widgetTypeId);
}
setPropertyMemento(arguments.memento);
setWidgetisLoaded(false);
if(structKeyExists(arguments.memento, "Widget"))
{
composite = arguments.memento.Widget;
}
else
{
composite = ArrayNew(1);
}
setWidgetMemento(composite);
setWidgetAsArrayisLoaded(false);
if(structKeyExists(arguments.memento, "WidgetAsArray"))
{
composite = arguments.memento.WidgetAsArray;
}
else
{
composite = ArrayNew(1);
}
setWidgetAsArrayMemento(composite);
</cfscript>
</cffunction>

<cffunction name="setPropertyMemento" access="public" returntype="void" default="void" hint="" output="false">
<cfargument name="memento" type="struct" required="true">
<cfscript>
setname(arguments.memento.name);
</cfscript>
</cffunction>

<cffunction name="setWidgetMemento" access="public" returntype="void" default="void" hint="" output="false">
<cfargument name="memento" type="array" required="true">
<cfscript>
var counter = 0;
var len = 0;
var item = 0;
var composite = 0;
setWidgetisLoaded(true);
len = ArrayLen(arguments.memento);
clearWidget();
for(counter = 1; counter lte len; counter = counter + 1)
{
composite = arguments.memento[counter];
composite.parentWidgetType_transferObject = getThisObject();
item = getComposite("widget.Widget", composite, "widgetId");
item.setParentWidgetType(getThisObject());
if(item.getIsClone())
{
item.getOriginalTransferObject().setIsDirty(composite.transfer_isDirty);
item.getOriginalTransferObject().setIsPersisted(composite.transfer_isPersisted);
}
}
</cfscript>
</cffunction>

<cffunction name="setWidgetAsArrayMemento" access="public" returntype="void" default="void" hint="" output="false">
<cfargument name="memento" type="array" required="true">
<cfscript>
var counter = 0;
var len = 0;
var item = 0;
var composite = 0;
setWidgetAsArrayisLoaded(true);
len = ArrayLen(arguments.memento);
clearWidgetAsArray();
for(counter = 1; counter lte len; counter = counter + 1)
{
composite = arguments.memento[counter];
composite.parentWidgetType_transferObject = getThisObject();
item = getComposite("widget.Widget", composite, "widgetId");
item.setParentWidgetType(getThisObject());
if(item.getIsClone())
{
item.getOriginalTransferObject().setIsDirty(composite.transfer_isDirty);
item.getOriginalTransferObject().setIsPersisted(composite.transfer_isPersisted);
}
}
</cfscript>
</cffunction>

<cffunction name="getMemento" access="public" returntype="struct" default="struct" hint="Returns the memento for all non-lazy members of this object" output="false">
<cfscript>
var memento = StructNew();
memento.widgetTypeId = getwidgetTypeId();
memento.transfer_isDirty = getIsDirty();
memento.transfer_isPersisted = getIsPersisted();
StructAppend(memento, getPropertyMemento());
memento.Widget = getWidgetMemento();
memento.WidgetAsArray = getWidgetAsArrayMemento();
return memento;
</cfscript>
</cffunction>

<cffunction name="getPropertyMemento" access="public" returntype="struct" default="struct" hint="returns the memento for properties" output="false">
<cfscript>
var memento = StructNew();
memento.name = getname();
return duplicate(memento);
</cfscript>
</cffunction>

<cffunction name="getWidgetMemento" access="public" returntype="array" default="array" hint="returns the memento for the onetomany Widget" output="false">
<cfscript>
var memento = ArrayNew(1);
var iterator = getWidgetIterator();
var item = 0;
while(iterator.hasNext())
{
item = iterator.next();
ArrayAppend(memento, item.getMemento());
}
return memento;
</cfscript>
</cffunction>

<cffunction name="getWidgetAsArrayMemento" access="public" returntype="array" default="array" hint="returns the memento for the onetomany WidgetAsArray" output="false">
<cfscript>
var memento = ArrayNew(1);
var iterator = getWidgetAsArrayIterator();
var item = 0;
while(iterator.hasNext())
{
item = iterator.next();
ArrayAppend(memento, item.getMemento());
}
return memento;
</cfscript>
</cffunction>

<cffunction name="copyValuesTo" access="public" returntype="void" default="void" hint="Copies the values of this object to one of the same class" output="false">
<cfargument name="transfer" type="transfer.com.TransferObject" required="true">
<cfscript>
if(arguments.transfer.getClassName() neq "widget.WidgetType")
{
throw("InvalidTransferClassException","The supplied Transfer class was not the one specified in the configuration file ","The Transfer class of '#arguments.transfer.getClassName()#' does not match the expected class of 'widget.WidgetType'");
}
arguments.transfer.setMemento(getMemento());
</cfscript>
</cffunction>

<cffunction name="getWidgetCollection" access="private" returntype="struct" default="struct" hint="" output="false">
<cfscript>
return instance.Widget;
</cfscript>
</cffunction>

<cffunction name="setWidgetCollection" access="private" returntype="void" default="void" hint="" output="false">
<cfargument name="Widget" type="struct" required="true">
<cfscript>
instance.Widget = arguments.Widget;
</cfscript>
</cffunction>

<cffunction name="getWidget" access="public" returntype="transfer.com.TransferObject" default="transfer.com.TransferObject" hint="" output="false">
<cfargument name="key" type="string" required="true">
<cfscript>
if(NOT getWidgetisLoaded())
{
loadWidget();
}
return StructFind(getWidgetCollection(), arguments.key);
</cfscript>
</cffunction>

<cffunction name="getWidgetStruct" access="public" returntype="struct" default="struct" hint="" output="false">
<cfscript>
var struct = StructNew();
if(NOT getWidgetisLoaded())
{
loadWidget();
}
struct.putAll(getWidgetCollection());
return struct;
</cfscript>
</cffunction>

<cffunction name="getWidgetIterator" access="public" returntype="any" default="any" hint="" output="false">
<cfscript>
if(NOT getWidgetisLoaded())
{
loadWidget();
}
return getWidgetStruct().values().iterator();
</cfscript>
</cffunction>

<cffunction name="containsWidget" access="public" returntype="boolean" default="boolean" hint="" output="false">
<cfargument name="object" type="transfer.com.TransferObject" required="true">
<cfscript>
if(arguments.object.getClassName() neq "widget.Widget")
{
throw("InvalidTransferClassException","The supplied Transfer class was not the one specified in the configuration file ","The Transfer class of '#arguments.object.getClassName()#' does not match the expected class of 'widget.Widget'");
}
if(NOT getWidgetisLoaded())
{
loadWidget();
}
return StructKeyExists(getWidgetCollection(), arguments.object.getwidgetId());
</cfscript>
</cffunction>

<cffunction name="findWidget" access="public" returntype="string" default="string" hint="" output="false">
<cfargument name="object" type="transfer.com.TransferObject" required="true">
<cfscript>
if(arguments.object.getClassName() neq "widget.Widget")
{
throw("InvalidTransferClassException","The supplied Transfer class was not the one specified in the configuration file ","The Transfer class of '#arguments.object.getClassName()#' does not match the expected class of 'widget.Widget'");
}
if(containsWidget(arguments.object))
{
return arguments.object.getwidgetId();
}
return "";
</cfscript>
</cffunction>

<cffunction name="addWidget" access="package" returntype="void" default="void" hint="" output="false">
<cfargument name="object" type="transfer.com.TransferObject" required="true">
<cfscript>
if(arguments.object.getClassName() neq "widget.Widget")
{
throw("InvalidTransferClassException","The supplied Transfer class was not the one specified in the configuration file ","The Transfer class of '#arguments.object.getClassName()#' does not match the expected class of 'widget.Widget'");
}
StructInsert(getWidgetCollection(), arguments.object.getwidgetId(), arguments.object, true);
</cfscript>
</cffunction>

<cffunction name="removeWidget" access="package" returntype="void" default="void" hint="" output="false">
<cfargument name="object" type="transfer.com.TransferObject" required="true">
<cfscript>
if(arguments.object.getClassName() neq "widget.Widget")
{
throw("InvalidTransferClassException","The supplied Transfer class was not the one specified in the configuration file ","The Transfer class of '#arguments.object.getClassName()#' does not match the expected class of 'widget.Widget'");
}
if(containsWidget(arguments.object))
{
structDelete(getWidgetCollection(), arguments.object.getwidgetId());
}
</cfscript>
</cffunction>

<cffunction name="clearWidget" access="package" returntype="void" default="void" hint="" output="false">
<cfscript>
StructClear(getWidgetCollection());
</cfscript>
</cffunction>

<cffunction name="getWidgetAsArrayCollection" access="private" returntype="array" default="array" hint="" output="false">
<cfscript>
return instance.WidgetAsArray;
</cfscript>
</cffunction>

<cffunction name="setWidgetAsArrayCollection" access="private" returntype="void" default="void" hint="" output="false">
<cfargument name="WidgetAsArray" type="array" required="true">
<cfscript>
instance.WidgetAsArray = arguments.WidgetAsArray;
</cfscript>
</cffunction>

<cffunction name="getWidgetAsArray" access="public" returntype="transfer.com.TransferObject" default="transfer.com.TransferObject" hint="" output="false">
<cfargument name="index" type="numeric" required="true">
<cfscript>
if(NOT getWidgetAsArrayisLoaded())
{
loadWidgetAsArray();
}
return getWidgetAsArrayCollection().get(JavaCast("int", arguments.index - 1));
</cfscript>
</cffunction>

<cffunction name="getWidgetAsArrayArray" access="public" returntype="array" default="array" hint="" output="false">
<cfscript>
var array = ArrayNew(1);
if(NOT getWidgetAsArrayisLoaded())
{
loadWidgetAsArray();
}
array.addAll(getWidgetAsArrayCollection());
return array;
</cfscript>
</cffunction>

<cffunction name="getWidgetAsArrayIterator" access="public" returntype="any" default="any" hint="" output="false">
<cfscript>
if(NOT getWidgetAsArrayisLoaded())
{
loadWidgetAsArray();
}
return getWidgetAsArrayArray().iterator();
</cfscript>
</cffunction>

<cffunction name="containsWidgetAsArray" access="public" returntype="boolean" default="boolean" hint="" output="false">
<cfargument name="object" type="transfer.com.TransferObject" required="true">
<cfscript>
var iterator = 0;
var composite = 0;
if(NOT getWidgetAsArrayisLoaded())
{
loadWidgetAsArray();
}
iterator = getWidgetAsArrayCollection().iterator();
if(arguments.object.getClassName() neq "widget.Widget")
{
throw("InvalidTransferClassException","The supplied Transfer class was not the one specified in the configuration file ","The Transfer class of '#arguments.object.getClassName()#' does not match the expected class of 'widget.Widget'");
}
while(iterator.hasNext())
{
composite = iterator.next();
if(composite.equalsTransfer(arguments.object))
{
return true;
}
}
return false;
</cfscript>
</cffunction>

<cffunction name="findWidgetAsArray" access="public" returntype="numeric" default="numeric" hint="" output="false">
<cfargument name="object" type="transfer.com.TransferObject" required="true">
<cfscript>
var iterator = 0;
var composite = 0;
var counter = 0;
if(NOT getWidgetAsArrayisLoaded())
{
loadWidgetAsArray();
}
iterator = getWidgetAsArrayCollection().iterator();
if(arguments.object.getClassName() neq "widget.Widget")
{
throw("InvalidTransferClassException","The supplied Transfer class was not the one specified in the configuration file ","The Transfer class of '#arguments.object.getClassName()#' does not match the expected class of 'widget.Widget'");
}
while(iterator.hasNext())
{
composite = iterator.next();
counter = counter + 1;
if(composite.equalsTransfer(arguments.object))
{
return counter;
}
}
return -1;
</cfscript>
</cffunction>

<cffunction name="addWidgetAsArray" access="package" returntype="void" default="void" hint="" output="false">
<cfargument name="object" type="transfer.com.TransferObject" required="true">
<cfscript>
if(arguments.object.getClassName() neq "widget.Widget")
{
throw("InvalidTransferClassException","The supplied Transfer class was not the one specified in the configuration file ","The Transfer class of '#arguments.object.getClassName()#' does not match the expected class of 'widget.Widget'");
}
ArrayAppend(getWidgetAsArrayCollection(), arguments.object);
</cfscript>
</cffunction>

<cffunction name="removeWidgetAsArray" access="package" returntype="void" default="void" hint="" output="false">
<cfargument name="object" type="transfer.com.TransferObject" required="true">
<cfscript>
var iterator = getWidgetAsArrayCollection().iterator();
var composite = 0;
if(arguments.object.getClassName() neq "widget.Widget")
{
throw("InvalidTransferClassException","The supplied Transfer class was not the one specified in the configuration file ","The Transfer class of '#arguments.object.getClassName()#' does not match the expected class of 'widget.Widget'");
}
while(iterator.hasNext())
{
composite = iterator.next();
if(composite.equalsTransfer(arguments.object))
{
iterator.remove();
return;
}
}
</cfscript>
</cffunction>

<cffunction name="clearWidgetAsArray" access="package" returntype="void" default="void" hint="" output="false">
<cfscript>
ArrayClear(getWidgetAsArrayCollection());
</cfscript>
</cffunction>

<cffunction name="sortWidgetAsArray" access="public" returntype="void" default="void" hint="" output="false">
<cfscript>
if(NOT arrayisEmpty(getWidgetAsArrayCollection()))
{
setWidgetAsArrayCollection(getUtility().quickSort(getWidgetAsArrayCollection(), WidgetAsArrayComparator));
}
</cfscript>
</cffunction>

<cffunction name="WidgetAsArrayComparator" access="private" returntype="numeric" default="numeric" hint="" output="false">
<cfargument name="object1" type="transfer.com.TransferObject" required="true">
<cfargument name="object2" type="transfer.com.TransferObject" required="true">
<cfscript>
if(arguments.object1.getwidgetId() lt arguments.object2.getwidgetId())
{
return -1;
}
else if(arguments.object1.getwidgetId() gt arguments.object2.getwidgetId())
{
return 1;
}
return 0;
</cfscript>
</cffunction>

<cffunction name="actionBeforeDeleteTransferEvent" access="public" returntype="void" default="void" hint="" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true">
<cfscript>
var changed = false;
switch(arguments.event.getTransferObject().getClassName())
{
}
switch(arguments.event.getTransferObject().getClassName())
{
}
switch(arguments.event.getTransferObject().getClassName())
{
}
if(changed eq true)
{
getTransfer().update(getThisObject());
}
</cfscript>
</cffunction>

<cffunction name="actionAfterDeleteTransferEvent" access="public" returntype="void" default="void" hint="" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true">
<cfscript>
switch(arguments.event.getTransferObject().getClassName())
{
case "widget.Widget":
if(getWidgetIsLoaded() AND containsWidget(arguments.event.getTransferObject()))
{
removeWidget(arguments.event.getTransferObject());
}
if(getWidgetAsArrayIsLoaded() AND containsWidgetAsArray(arguments.event.getTransferObject()))
{
removeWidgetAsArray(arguments.event.getTransferObject());
}
break;
}
</cfscript>
</cffunction>

<cffunction name="actionAfterUpdateTransferEvent" access="public" returntype="void" default="void" hint="" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true">
<cfscript>
switch(arguments.event.getTransferObject().getClassName())
{
case "widget.Widget":
if(arguments.event.getTransferObject().hasParentWidgetType())
{
if(NOT arguments.event.getTransferObject().getParentWidgetType().equalsTransfer(getThisObject())
AND
containsWidget(arguments.event.getTransferObject()))
{
removeWidget(arguments.event.getTransferObject());
}
else if(arguments.event.getTransferObject().getParentWidgetType().equalsTransfer(getThisObject()))
{
if(NOT containsWidget(arguments.event.getTransferObject()))
{
addWidget(arguments.event.getTransferObject());
}
}
}
else if(containsWidget(arguments.event.getTransferObject()))
{
removeWidget(arguments.event.getTransferObject());
}
if(arguments.event.getTransferObject().hasParentWidgetType())
{
if(NOT arguments.event.getTransferObject().getParentWidgetType().equalsTransfer(getThisObject())
AND
containsWidgetAsArray(arguments.event.getTransferObject()))
{
removeWidgetAsArray(arguments.event.getTransferObject());
}
else if(arguments.event.getTransferObject().getParentWidgetType().equalsTransfer(getThisObject()))
{
if(NOT containsWidgetAsArray(arguments.event.getTransferObject()))
{
addWidgetAsArray(arguments.event.getTransferObject());
}
sortWidgetAsArray();
}
}
else if(containsWidgetAsArray(arguments.event.getTransferObject()))
{
removeWidgetAsArray(arguments.event.getTransferObject());
}
break;
}
</cfscript>
</cffunction>

<cffunction name="actionBeforeDiscardTransferEvent" access="public" returntype="void" default="void" hint="" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true">
<cfscript>
var discard = false;
switch(arguments.event.getTransferObject().getClassName())
{
case "widget.Widget":
if(arguments.event.getTransferObject().hasParentWidgetType() AND arguments.event.getTransferObject().getParentWidgetType().equalsTransfer(getThisObject())
AND
containsWidget(arguments.event.getTransferObject()))
{
discard = true;
}
if(arguments.event.getTransferObject().hasParentWidgetType() AND arguments.event.getTransferObject().getParentWidgetType().equalsTransfer(getThisObject())
AND
containsWidgetAsArray(arguments.event.getTransferObject()))
{
discard = true;
}
break;
}
switch(arguments.event.getTransferObject().getClassName())
{
}
switch(arguments.event.getTransferObject().getClassName())
{
}
switch(arguments.event.getTransferObject().getClassName())
{
}
if(discard)
{
getTransfer().discard(getThisObject());
}
</cfscript>
</cffunction>


